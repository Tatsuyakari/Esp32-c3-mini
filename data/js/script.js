document.addEventListener('DOMContentLoaded', function() {
    // Elements
    const scanBtn = document.getElementById('scan-btn');
    const networkList = document.getElementById('network-list');
    const connectForm = document.getElementById('connect-form');
    const ssidInput = document.getElementById('ssid');
    const passInput = document.getElementById('pass');
    const disconnectBtn = document.getElementById('disconnect-btn');
    const connectionStatus = document.getElementById('connection-status');
    const apInfo = document.getElementById('ap-info');
    const wifiInfo = document.getElementById('wifi-info');
    
    // Fetch initial status
    fetchStatus();
    
    // Event listeners
    scanBtn.addEventListener('click', scanNetworks);
    connectForm.addEventListener('submit', connectToWifi);
    disconnectBtn.addEventListener('click', disconnectWifi);
    
    // Functions
    function fetchStatus() {
      fetch('/api/status')
        .then(response => response.json())
        .then(data => {
          // Update AP info
          apInfo.textContent = `${data.ap_ssid} (${data.ap_ip})`;
          
          // Update WiFi connection info
          if (data.wifi_connected) {
            connectionStatus.textContent = 'ƒê√£ k·∫øt n·ªëi';
            connectionStatus.style.color = '#4caf50';
            wifiInfo.textContent = `${data.wifi_ssid} (${data.wifi_ip})`;
            disconnectBtn.style.display = 'block';
          } else {
            connectionStatus.textContent = 'Ch∆∞a k·∫øt n·ªëi';
            connectionStatus.style.color = '#f44336';
            wifiInfo.textContent = 'Ch∆∞a k·∫øt n·ªëi';
            disconnectBtn.style.display = 'none';
          }
        })
        .catch(error => {
          showToast('Kh√¥ng th·ªÉ t·∫£i tr·∫°ng th√°i: ' + error.message);
        });
    }
    
    function scanNetworks() {
      scanBtn.disabled = true;
      scanBtn.textContent = 'ƒêang qu√©t...';
      networkList.innerHTML = '<p>ƒêang t√¨m ki·∫øm m·∫°ng WiFi...</p>';
      
      fetch('/api/scan')
        .then(response => response.json())
        .then(data => {
          networkList.innerHTML = '';
          
          if (data.networks && data.networks.length > 0) {
            data.networks.forEach(network => {
              const networkItem = document.createElement('div');
              networkItem.className = 'network-item';
              networkItem.addEventListener('click', () => {
                ssidInput.value = network.ssid;
                passInput.focus();
              });
              
              // Calculate signal strength (0-4)
              const signalStrength = calculateSignalStrength(network.rssi);
              const signalBars = '‚ñÇ‚ñÑ‚ñÜ‚ñà'.slice(0, signalStrength);
              
              networkItem.innerHTML = `
                <div class="network-icon">${network.secure ? 'üîí' : 'üîì'}</div>
                <div class="network-details">
                  <div class="network-name">${network.ssid}</div>
                  <div class="network-info">${network.secure ? 'B·∫£o m·∫≠t' : 'M·ªü'}</div>
                </div>
                <div class="signal-strength">
                  <span class="signal-bars">${signalBars}</span>
                  <span>${network.rssi} dBm</span>
                </div>
              `;
              
              networkList.appendChild(networkItem);
            });
          } else {
            networkList.innerHTML = '<p>Kh√¥ng t√¨m th·∫•y m·∫°ng WiFi n√†o</p>';
          }
        })
        .catch(error => {
          networkList.innerHTML = '<p>L·ªói khi qu√©t: ' + error.message + '</p>';
        })
        .finally(() => {
          scanBtn.disabled = false;
          scanBtn.textContent = 'Qu√©t WiFi';
        });
    }
    
    function connectToWifi(event) {
      event.preventDefault();
      
      const formData = new FormData(connectForm);
      const ssid = formData.get('ssid');
      const pass = formData.get('pass');
      
      if (!ssid) {
        showToast('Vui l√≤ng nh·∫≠p SSID');
        return;
      }
      
      const submitBtn = connectForm.querySelector('button[type="submit"]');
      submitBtn.disabled = true;
      submitBtn.textContent = 'ƒêang k·∫øt n·ªëi...';
      
      fetch('/api/connect', {
        method: 'POST',
        body: formData
      })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showToast('K·∫øt n·ªëi th√†nh c√¥ng!');
            fetchStatus();
          } else {
            showToast('K·∫øt n·ªëi th·∫•t b·∫°i: ' + data.message);
          }
        })
        .catch(error => {
          showToast('L·ªói: ' + error.message);
        })
        .finally(() => {
          submitBtn.disabled = false;
          submitBtn.textContent = 'K·∫øt n·ªëi';
        });
    }
    
    function disconnectWifi() {
      disconnectBtn.disabled = true;
      disconnectBtn.textContent = 'ƒêang ng·∫Øt k·∫øt n·ªëi...';
      
      fetch('/api/disconnect')
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showToast('ƒê√£ ng·∫Øt k·∫øt n·ªëi WiFi');
            fetchStatus();
          } else {
            showToast(data.message);
          }
        })
        .catch(error => {
          showToast('L·ªói: ' + error.message);
        })
        .finally(() => {
          disconnectBtn.disabled = false;
          disconnectBtn.textContent = 'Ng·∫Øt k·∫øt n·ªëi';
        });
    }
    
    function calculateSignalStrength(rssi) {
      // RSSI th∆∞·ªùng t·ª´ -100dBm (y·∫øu) ƒë·∫øn -30dBm (m·∫°nh)
      if (rssi >= -50) return 4;      // R·∫•t m·∫°nh (-50 ƒë·∫øn -30)
      else if (rssi >= -65) return 3; // M·∫°nh (-65 ƒë·∫øn -50)
      else if (rssi >= -75) return 2; // Trung b√¨nh (-75 ƒë·∫øn -65)
      else if (rssi >= -85) return 1; // Y·∫øu (-85 ƒë·∫øn -75)
      else return 0;                  // R·∫•t y·∫øu (d∆∞·ªõi -85)
    }
    
    function showToast(message) {
      const toast = document.getElementById('toast');
      toast.textContent = message;
      toast.classList.add('show');
      
      setTimeout(() => {
        toast.classList.remove('show');
      }, 3000);
    }
  });
  