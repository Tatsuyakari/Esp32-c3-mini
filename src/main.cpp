#include <Arduino.h>
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <SPIFFS.h>
#include <ArduinoJson.h>
#include <esp_now.h>
#include "esp_task_wdt.h" // ESP32-C3 s·ª≠ d·ª•ng th∆∞ vi·ªán n√†y

#define LED_BUILTIN 8
#define MAX_PEERS 20

// Kh·ªüi t·∫°o web server ch·∫°y tr√™n c·ªïng 80
AsyncWebServer server(80);

// C·∫•u h√¨nh WiFi AP
const char *MASTER_AP_SSID = "ESP32-KARI";
const char *SLAVE_AP_SSID = "ESP32-KARI-SLAVE";
const char *AP_PASS = ""; // Kh√¥ng ƒë·∫∑t m·∫≠t kh·∫©u
String AP_SSID_STR; // Bi·∫øn l∆∞u t√™n AP th·ª±c t·∫ø ƒë∆∞·ª£c s·ª≠ d·ª•ng
const char *AP_SSID; // Con tr·ªè ƒë·∫øn chu·ªói char

// Bi·∫øn tr·∫°ng th√°i WiFi
bool wifiConnected = false;
String connectedSSID = "";
IPAddress localIP;

// Bi·∫øn tr·∫°ng th√°i ESP-NOW
#define IS_MASTER true  // Thay ƒë·ªïi th√†nh false ƒë·ªÉ n·∫°p cho thi·∫øt b·ªã slave
bool is_master = IS_MASTER; // ƒê∆∞·ª£c quy ƒë·ªãnh b·∫±ng define
bool espNowActive = false;
typedef struct {
  uint8_t mac[6];
  String name;
  bool connected;
  int rssi;
  uint8_t channel;
  bool ledState;
} PeerInfo;
PeerInfo peerList[MAX_PEERS];
int peerCount = 0;

// C·∫•u tr√∫c d·ªØ li·ªáu cho ESP-NOW
typedef struct espnow_message {
  uint8_t type; // 0: discovery, 1: command, 2: status
  uint8_t data; // For commands: 0: LED OFF, 1: LED ON, others for future use
  char name[16]; // Device name
} espnow_message_t;

// Callback khi g·ª≠i d·ªØ li·ªáu ESP-NOW
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("üì§ G·ª≠i d·ªØ li·ªáu ƒë·∫øn: ");
  char macStr[18];
  snprintf(macStr, sizeof(macStr), "%02X:%02X:%02X:%02X:%02X:%02X",
           mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5]);
  Serial.print(macStr);
  Serial.print(" - Tr·∫°ng th√°i: ");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Th√†nh c√¥ng" : "Th·∫•t b·∫°i");
}

// Callback khi nh·∫≠n d·ªØ li·ªáu ESP-NOW
void OnDataRecv(const uint8_t *mac, const uint8_t *data, int len) {
  Serial.print("üì• Nh·∫≠n d·ªØ li·ªáu t·ª´: ");
  char macStr[18];
  snprintf(macStr, sizeof(macStr), "%02X:%02X:%02X:%02X:%02X:%02X",
           mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
  Serial.println(macStr);

  espnow_message_t *message = (espnow_message_t *)data;

  if (is_master) {
    // Master nh·∫≠n d·ªØ li·ªáu
    if (message->type == 0) {  // Discovery response
      // Ki·ªÉm tra xem thi·∫øt b·ªã ƒë√£ c√≥ trong danh s√°ch ch∆∞a
      bool found = false;
      for (int i = 0; i < peerCount; i++) {
        if (memcmp(peerList[i].mac, mac, 6) == 0) {
          // C·∫≠p nh·∫≠t th√¥ng tin n·∫øu ƒë√£ c√≥
          peerList[i].name = String(message->name);
          peerList[i].rssi = WiFi.RSSI();
          found = true;
          break;
        }
      }

      // Th√™m thi·∫øt b·ªã m·ªõi v√†o danh s√°ch n·∫øu ch∆∞a c√≥
      if (!found && peerCount < MAX_PEERS) {
        memcpy(peerList[peerCount].mac, mac, 6);
        peerList[peerCount].name = String(message->name);
        peerList[peerCount].connected = false;
        peerList[peerCount].rssi = WiFi.RSSI();
        peerList[peerCount].channel = WiFi.channel();
        peerList[peerCount].ledState = false;
        peerCount++;
        Serial.println("üÜï Th√™m thi·∫øt b·ªã m·ªõi v√†o danh s√°ch: " + String(message->name));
      }
    } else if (message->type == 2) {  // Status update
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i LED c·ªßa thi·∫øt b·ªã
      for (int i = 0; i < peerCount; i++) {
        if (memcmp(peerList[i].mac, mac, 6) == 0) {
          peerList[i].ledState = message->data;
          Serial.println("üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i LED c·ªßa " + peerList[i].name + ": " + (message->data ? "B·∫¨T" : "T·∫ÆT"));
          break;
        }
      }
    }
  } else {
    // Slave nh·∫≠n d·ªØ li·ªáu
    if (message->type == 0) {  // Discovery request
      // G·ª≠i ph·∫£n h·ªìi t·ªõi master
      espnow_message_t response;
      response.type = 0;  // Discovery response
      response.data = 0;
      strncpy(response.name, AP_SSID, sizeof(response.name));
      esp_err_t result = esp_now_send(mac, (uint8_t *)&response, sizeof(response));
      if (result == ESP_OK) {
        Serial.println("‚úÖ ƒê√£ g·ª≠i ph·∫£n h·ªìi kh√°m ph√° ƒë·∫øn master");
      }
    } else if (message->type == 1) {  // Command
      // X·ª≠ l√Ω l·ªánh ƒëi·ªÅu khi·ªÉn LED
      if (message->data == 0 || message->data == 1) {
        digitalWrite(LED_BUILTIN, message->data);
        Serial.println("üí° LED ƒë√£ ƒë∆∞·ª£c " + String(message->data ? "B·∫¨T" : "T·∫ÆT"));
        
        // G·ª≠i tr·∫°ng th√°i LED v·ªÅ master
        espnow_message_t statusMsg;
        statusMsg.type = 2;  // Status
        statusMsg.data = message->data;  // LED state
        strncpy(statusMsg.name, AP_SSID, sizeof(statusMsg.name));
        esp_now_send(mac, (uint8_t *)&statusMsg, sizeof(statusMsg));
      }
    }
  }
}

// H√†m t·∫Øt Watchdog Timer ƒë·ªÉ tr√°nh reset ngo√†i √Ω mu·ªën
void disableWDT()
{
  esp_task_wdt_deinit();
}

// H√†m kh·ªüi t·∫°o Access Point
void setupAP()
{
  IPAddress apIP(192, 168, 4, 1);
  IPAddress netMsk(255, 255, 255, 0);

  // Ch·ªçn t√™n WiFi d·ª±a tr√™n vai tr√≤ master/slave
  AP_SSID_STR = is_master ? MASTER_AP_SSID : SLAVE_AP_SSID;
  AP_SSID = AP_SSID_STR.c_str(); // C·∫≠p nh·∫≠t con tr·ªè

  WiFi.mode(WIFI_AP_STA);
  WiFi.softAPConfig(apIP, apIP, netMsk);
  WiFi.softAP(AP_SSID, AP_PASS);

  Serial.println("‚ö° Access Point ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o:");
  Serial.println("üì∂ SSID: " + AP_SSID_STR);
  Serial.print("üåê ƒê·ªãa ch·ªâ IP: ");
  Serial.println(WiFi.softAPIP());
}

// H√†m kh·ªüi t·∫°o ESP-NOW
bool initESPNow() {
  if (esp_now_init() != ESP_OK) {
    Serial.println("‚ùå Kh·ªüi t·∫°o ESP-NOW th·∫•t b·∫°i");
    return false;
  }

  esp_now_register_send_cb(OnDataSent);
  esp_now_register_recv_cb(OnDataRecv);
  
  Serial.println("‚úÖ Kh·ªüi t·∫°o ESP-NOW th√†nh c√¥ng");
  return true;
}

// H√†m th√™m peer v√†o ESP-NOW
bool addPeer(uint8_t *mac, uint8_t channel) {
  esp_now_peer_info_t peerInfo = {};
  memcpy(peerInfo.peer_addr, mac, 6);
  peerInfo.channel = channel;
  peerInfo.encrypt = false;  // Kh√¥ng m√£ h√≥a k·∫øt n·ªëi

  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("‚ùå Th√™m peer th·∫•t b·∫°i");
    return false;
  }
  return true;
}

// H√†m qu√©t t√¨m thi·∫øt b·ªã ESP-NOW
void scanESPNowDevices() {
  if (!is_master) {
    Serial.println("‚ö†Ô∏è Ch·ªâ c√≥ master m·ªõi c√≥ th·ªÉ qu√©t thi·∫øt b·ªã");
    return;
  }

  Serial.println("üîç ƒêang qu√©t thi·∫øt b·ªã ESP-NOW...");
  
  // G·ª≠i g√≥i tin broadcast ƒë·ªÉ t√¨m thi·∫øt b·ªã
  uint8_t broadcastMac[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
  esp_now_peer_info_t peerInfo = {};
  memcpy(peerInfo.peer_addr, broadcastMac, 6);
  peerInfo.channel = 0;  // K√™nh c·ªßa WiFi hi·ªán t·∫°i
  peerInfo.encrypt = false;
  
  // X√≥a peer n·∫øu ƒë√£ t·ªìn t·∫°i
  esp_now_del_peer(broadcastMac);
  
  // Th√™m peer broadcast
  esp_err_t result = esp_now_add_peer(&peerInfo);
  if (result != ESP_OK) {
    Serial.println("‚ùå Kh√¥ng th·ªÉ th√™m peer broadcast");
    return;
  }
  
  // G·ª≠i tin nh·∫Øn discovery
  espnow_message_t discMsg;
  discMsg.type = 0;  // Discovery
  discMsg.data = 0;
  strncpy(discMsg.name, AP_SSID, sizeof(discMsg.name));
  
  result = esp_now_send(broadcastMac, (uint8_t *)&discMsg, sizeof(discMsg));
  if (result != ESP_OK) {
    Serial.println("‚ùå Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn discovery");
  } else {
    Serial.println("üì® ƒê√£ g·ª≠i g√≥i tin discovery");
  }
}

// H√†m x·ª≠ l√Ω API qu√©t ESP-NOW
void handleESPNowScan(AsyncWebServerRequest *request) {
  if (!espNowActive) {
    request->send(400, "application/json", "{\"success\":false,\"message\":\"ESP-NOW ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t\"}");
    return;
  }
  
  // ƒê·∫∑t l·∫°i danh s√°ch thi·∫øt b·ªã
  peerCount = 0;
  
  // Qu√©t thi·∫øt b·ªã ESP-NOW
  scanESPNowDevices();
  
  request->send(200, "application/json", "{\"success\":true,\"message\":\"ƒêang qu√©t thi·∫øt b·ªã ESP-NOW\"}");
}

// H√†m x·ª≠ l√Ω API l·∫•y danh s√°ch thi·∫øt b·ªã ESP-NOW
void handleESPNowList(AsyncWebServerRequest *request) {
  if (!espNowActive) {
    request->send(400, "application/json", "{\"success\":false,\"message\":\"ESP-NOW ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t\"}");
    return;
  }
  
  DynamicJsonDocument doc(4096);
  JsonArray devices = doc.createNestedArray("devices");
  
  for (int i = 0; i < peerCount; i++) {
    JsonObject device = devices.createNestedObject();
    char macStr[18];
    snprintf(macStr, sizeof(macStr), "%02X:%02X:%02X:%02X:%02X:%02X",
             peerList[i].mac[0], peerList[i].mac[1], peerList[i].mac[2], 
             peerList[i].mac[3], peerList[i].mac[4], peerList[i].mac[5]);
    
    device["mac"] = String(macStr);
    device["name"] = peerList[i].name;
    device["connected"] = peerList[i].connected;
    device["rssi"] = peerList[i].rssi;
    device["ledState"] = peerList[i].ledState;
  }
  
  String response;
  serializeJson(doc, response);
  request->send(200, "application/json", response);
}

// H√†m x·ª≠ l√Ω API k·∫øt n·ªëi ƒë·∫øn thi·∫øt b·ªã ESP-NOW
void handleESPNowConnect(AsyncWebServerRequest *request) {
  if (!espNowActive || !is_master) {
    request->send(400, "application/json", "{\"success\":false,\"message\":\"Ch·ªâ master m·ªõi c√≥ th·ªÉ k·∫øt n·ªëi\"}");
    return;
  }
  
  if (!request->hasParam("mac", true)) {
    request->send(400, "application/json", "{\"success\":false,\"message\":\"Thi·∫øu ƒë·ªãa ch·ªâ MAC\"}");
    return;
  }
  
  String macStr = request->getParam("mac", true)->value();
  uint8_t mac[6];
  
  // Chuy·ªÉn ƒë·ªïi chu·ªói MAC th√†nh m·∫£ng byte
  sscanf(macStr.c_str(), "%2hhx:%2hhx:%2hhx:%2hhx:%2hhx:%2hhx", 
         &mac[0], &mac[1], &mac[2], &mac[3], &mac[4], &mac[5]);
  
  // T√¨m thi·∫øt b·ªã trong danh s√°ch
  int deviceIndex = -1;
  for (int i = 0; i < peerCount; i++) {
    if (memcmp(peerList[i].mac, mac, 6) == 0) {
      deviceIndex = i;
      break;
    }
  }
  
  if (deviceIndex == -1) {
    request->send(404, "application/json", "{\"success\":false,\"message\":\"Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã\"}");
    return;
  }
  
  // Th√™m peer v√†o ESP-NOW
  bool result = addPeer(mac, peerList[deviceIndex].channel);
  
  if (result) {
    peerList[deviceIndex].connected = true;
    request->send(200, "application/json", "{\"success\":true,\"message\":\"K·∫øt n·ªëi th√†nh c√¥ng\"}");
    Serial.println("‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi thi·∫øt b·ªã: " + peerList[deviceIndex].name);
  } else {
    request->send(500, "application/json", "{\"success\":false,\"message\":\"Kh√¥ng th·ªÉ k·∫øt n·ªëi\"}");
  }
}

// H√†m x·ª≠ l√Ω API ƒëi·ªÅu khi·ªÉn LED
void handleESPNowToggleLED(AsyncWebServerRequest *request) {
  if (!espNowActive || !is_master) {
    request->send(400, "application/json", "{\"success\":false,\"message\":\"Ch·ªâ master m·ªõi c√≥ th·ªÉ ƒëi·ªÅu khi·ªÉn LED\"}");
    return;
  }
  
  if (!request->hasParam("mac", true)) {
    request->send(400, "application/json", "{\"success\":false,\"message\":\"Thi·∫øu ƒë·ªãa ch·ªâ MAC\"}");
    return;
  }
  
  if (!request->hasParam("state", true)) {
    request->send(400, "application/json", "{\"success\":false,\"message\":\"Thi·∫øu tr·∫°ng th√°i LED\"}");
    return;
  }
  
  String macStr = request->getParam("mac", true)->value();
  String stateStr = request->getParam("state", true)->value();
  
  uint8_t mac[6];
  sscanf(macStr.c_str(), "%2hhx:%2hhx:%2hhx:%2hhx:%2hhx:%2hhx", 
         &mac[0], &mac[1], &mac[2], &mac[3], &mac[4], &mac[5]);
  
  uint8_t state = stateStr == "1" ? 1 : 0;
  
  // T√¨m thi·∫øt b·ªã trong danh s√°ch
  int deviceIndex = -1;
  for (int i = 0; i < peerCount; i++) {
    if (memcmp(peerList[i].mac, mac, 6) == 0) {
      deviceIndex = i;
      break;
    }
  }
  
  if (deviceIndex == -1 || !peerList[deviceIndex].connected) {
    request->send(404, "application/json", "{\"success\":false,\"message\":\"Thi·∫øt b·ªã kh√¥ng ƒë∆∞·ª£c k·∫øt n·ªëi\"}");
    return;
  }
  
  // G·ª≠i l·ªánh ƒëi·ªÅu khi·ªÉn LED
  espnow_message_t cmdMsg;
  cmdMsg.type = 1;  // Command
  cmdMsg.data = state;  // 0: T·∫ÆT, 1: B·∫¨T
  strncpy(cmdMsg.name, AP_SSID, sizeof(cmdMsg.name));
  
  esp_err_t result = esp_now_send(mac, (uint8_t *)&cmdMsg, sizeof(cmdMsg));
  
  if (result == ESP_OK) {
    request->send(200, "application/json", "{\"success\":true,\"message\":\"ƒê√£ g·ª≠i l·ªánh ƒëi·ªÅu khi·ªÉn LED\"}");
    Serial.println("üì§ ƒê√£ g·ª≠i l·ªánh " + String(state ? "B·∫¨T" : "T·∫ÆT") + " LED ƒë·∫øn " + peerList[deviceIndex].name);
  } else {
    request->send(500, "application/json", "{\"success\":false,\"message\":\"Kh√¥ng th·ªÉ g·ª≠i l·ªánh\"}");
  }
}

// Kh√¥ng c√≤n h√†m ƒë·ªïi ch·∫ø ƒë·ªô master/slave, v√¨ ch·∫ø ƒë·ªô ƒë∆∞·ª£c quy ƒë·ªãnh b·∫±ng flag khi bi√™n d·ªãch

// H√†m qu√©t WiFi v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ d·∫°ng JSON
void handleScan(AsyncWebServerRequest *request)
{
  Serial.println("üîç ƒêang qu√©t WiFi...");
  int n = WiFi.scanNetworks();
  DynamicJsonDocument doc(4096);
  JsonArray networks = doc.createNestedArray("networks");

  if (n > 0)
  {
    for (int i = 0; i < n; i++)
    {
      JsonObject network = networks.createNestedObject();
      network["ssid"] = WiFi.SSID(i);
      network["rssi"] = WiFi.RSSI(i);
      network["secure"] = WiFi.encryptionType(i) != WIFI_AUTH_OPEN;
      yield(); // Tr√°nh b·ªã reset v√¨ qu√° t·∫£i
    }
  }

  String response;
  serializeJson(doc, response);
  request->send(200, "application/json", response);

  WiFi.scanDelete();
  Serial.println("üì° ƒê√£ g·ª≠i k·∫øt qu·∫£ qu√©t WiFi");
}

// H√†m x·ª≠ l√Ω k·∫øt n·ªëi WiFi
void handleConnect(AsyncWebServerRequest *request)
{
  Serial.println("üì® Nh·∫≠n y√™u c·∫ßu k·∫øt n·ªëi WiFi");

  if (!request->hasParam("ssid", true) || !request->hasParam("pass", true))
  {
    request->send(400, "application/json", "{\"success\":false,\"message\":\"Thi·∫øu SSID ho·∫∑c Password\"}");
    return;
  }

  String ssid = request->getParam("ssid", true)->value();
  String pass = request->getParam("pass", true)->value();

  DynamicJsonDocument doc(256);
  WiFi.mode(WIFI_AP_STA);
  WiFi.begin(ssid.c_str(), pass.c_str());

  Serial.print("‚è≥ ƒêang k·∫øt n·ªëi ");
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20)
  {
    delay(500);
    Serial.print(".");
    attempts++;
  }
  Serial.println();

  if (WiFi.status() == WL_CONNECTED)
  {
    doc["success"] = true;
    doc["message"] = "‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!";
    doc["ip"] = WiFi.localIP().toString();
    wifiConnected = true;
    connectedSSID = ssid;
    localIP = WiFi.localIP();
    Serial.println("üåç K·∫øt n·ªëi WiFi th√†nh c√¥ng, IP: " + localIP.toString());
  }
  else
  {
    doc["success"] = false;
    doc["message"] = "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi!";
    Serial.println("‚ö†Ô∏è K·∫øt n·ªëi WiFi th·∫•t b·∫°i");
  }

  String response;
  serializeJson(doc, response);
  request->send(200, "application/json", response);
}

// H√†m tr·∫£ v·ªÅ tr·∫°ng th√°i k·∫øt n·ªëi hi·ªán t·∫°i
void handleStatus(AsyncWebServerRequest *request)
{
  DynamicJsonDocument doc(512);
  doc["ap_ssid"] = AP_SSID_STR;
  doc["ap_ip"] = WiFi.softAPIP().toString();
  doc["wifi_connected"] = wifiConnected;
  doc["espnow_active"] = espNowActive;
  doc["is_master"] = is_master;
  doc["peer_count"] = peerCount;

  if (wifiConnected)
  {
    doc["wifi_ssid"] = connectedSSID;
    doc["wifi_ip"] = localIP.toString();
  }

  String response;
  serializeJson(doc, response);
  request->send(200, "application/json", response);
}

// H√†m ng·∫Øt k·∫øt n·ªëi WiFi
void handleDisconnect(AsyncWebServerRequest *request)
{
  if (wifiConnected)
  {
    WiFi.disconnect();
    wifiConnected = false;
    connectedSSID = "";
    request->send(200, "application/json", "{\"success\":true,\"message\":\"üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi WiFi\"}");
    Serial.println("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi WiFi");
  }
  else
  {
    request->send(200, "application/json", "{\"success\":false,\"message\":\"‚ö†Ô∏è Kh√¥ng c√≥ k·∫øt n·ªëi n√†o\"}");
  }
}

void setup()
{
  pinMode(LED_BUILTIN, OUTPUT);
  Serial.begin(115200);
  delay(1000);
  
  // In th√¥ng tin v·ªÅ ch·∫ø ƒë·ªô ho·∫°t ƒë·ªông
  Serial.println("üöÄ ESP32 C3 WiFi Manager ƒëang kh·ªüi ƒë·ªông...");
  Serial.println(is_master ? "üî∑ Kh·ªüi ƒë·ªông ·ªü ch·∫ø ƒë·ªô MASTER" : "üî∂ Kh·ªüi ƒë·ªông ·ªü ch·∫ø ƒë·ªô SLAVE");

  // T·∫Øt Watchdog Timer
  disableWDT();

  // Kh·ªüi ƒë·ªông SPIFFS
  if (!SPIFFS.begin(true))
  {
    Serial.println("‚ùå L·ªói mount SPIFFS, th·ª≠ format...");
    SPIFFS.format();
    if (!SPIFFS.begin())
    {
      Serial.println("‚ùå Format SPIFFS th·∫•t b·∫°i! D·ª´ng ch∆∞∆°ng tr√¨nh.");
      return;
    }
  }
  Serial.println("‚úÖ SPIFFS ƒë√£ ƒë∆∞·ª£c mount th√†nh c√¥ng");

  // Ki·ªÉm tra danh s√°ch t·ªáp trong SPIFFS
  Serial.println("üìÇ Danh s√°ch t·ªáp trong SPIFFS:");
  File root = SPIFFS.open("/");
  File file = root.openNextFile();
  while (file)
  {
    Serial.println("- " + String(file.name()));
    file = root.openNextFile();
  }

  // Kh·ªüi t·∫°o Access Point
  setupAP();

  // Kh·ªüi t·∫°o ESP-NOW
  espNowActive = initESPNow();
  
  // N·∫øu l√† slave, b·∫≠t LED ƒë·ªÉ s·∫µn s√†ng ki·ªÉm tra
  if (!is_master) {
    digitalWrite(LED_BUILTIN, HIGH);
    Serial.println("üí° LED ƒë√£ s·∫µn s√†ng cho ƒëi·ªÅu khi·ªÉn t·ª´ xa");
  }

  // ƒêƒÉng k√Ω c√°c ƒë∆∞·ªùng d·∫´n x·ª≠ l√Ω tƒ©nh
  server.serveStatic("/", SPIFFS, "/").setDefaultFile("index.html");
  server.serveStatic("/css", SPIFFS, "/css/");
  server.serveStatic("/js", SPIFFS, "/js/");

  // ƒêƒÉng k√Ω API endpoints
  server.on("/api/scan", HTTP_GET, handleScan);
  server.on("/api/connect", HTTP_POST, handleConnect);
  server.on("/api/status", HTTP_GET, handleStatus);
  server.on("/api/disconnect", HTTP_GET, handleDisconnect);
  
  // API ESP-NOW
  server.on("/api/espnow/scan", HTTP_GET, handleESPNowScan);
  server.on("/api/espnow/list", HTTP_GET, handleESPNowList);
  server.on("/api/espnow/connect", HTTP_POST, handleESPNowConnect);
  server.on("/api/espnow/toggle", HTTP_POST, handleESPNowToggleLED);

  // X·ª≠ l√Ω 404 Not Found
  server.onNotFound([](AsyncWebServerRequest *request)
                    { request->send(SPIFFS, "/index.html", "text/html"); });

  server.begin();
  Serial.println("üåê HTTP server ƒë√£ ch·∫°y!");
}

void loop()
{
  // N·∫øu l√† slave, g·ª≠i g√≥i tin broadcast ƒë·ªÉ th√¥ng b√°o s·ª± hi·ªán di·ªán
  // Slave li√™n t·ª•c broadcast ƒë·ªÉ Master ph√°t hi·ªán
  if (!is_master && espNowActive) {
    static unsigned long lastBroadcast = 0;
    unsigned long currentTime = millis();
    
    if (currentTime - lastBroadcast > 3000) {  // Broadcast m·ªói 3 gi√¢y
      lastBroadcast = currentTime;
      
      uint8_t broadcastMac[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
      esp_now_peer_info_t peerInfo = {};
      memcpy(peerInfo.peer_addr, broadcastMac, 6);
      peerInfo.channel = 0;  // S·ª≠ d·ª•ng k√™nh hi·ªán t·∫°i
      peerInfo.encrypt = false;
      
      // X√≥a peer c≈© n·∫øu ƒë√£ t·ªìn t·∫°i
      esp_now_del_peer(broadcastMac);
      
      // Th√™m peer broadcast
      esp_err_t result = esp_now_add_peer(&peerInfo);
      if (result == ESP_OK) {
        // G·ª≠i tin nh·∫Øn broadcast
        espnow_message_t discMsg;
        discMsg.type = 0;  // Discovery
        discMsg.data = 0;
        strncpy(discMsg.name, AP_SSID, sizeof(discMsg.name));
        
        esp_now_send(broadcastMac, (uint8_t *)&discMsg, sizeof(discMsg));
        Serial.println("üì¢ G·ª≠i t√≠n hi·ªáu broadcast");
        
        // Nh·∫•p nh√°y LED ƒë·ªÉ cho bi·∫øt ƒëang t√¨m master
        digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN));
      }
    }
  }
  
  // Master ƒë·ªãnh k·ª≥ qu√©t t√¨m slave m·ªõi
  if (is_master && espNowActive) {
    static unsigned long lastScan = 0;
    unsigned long currentTime = millis();
    
    if (currentTime - lastScan > 30000) {  // Qu√©t m·ªói 30 gi√¢y
      lastScan = currentTime;
      scanESPNowDevices();
    }
  }

  digitalWrite(LED_BUILTIN, LOW);
  delay(50);
  digitalWrite(LED_BUILTIN, HIGH);
  delay(950);
}