#include <Arduino.h>
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <SPIFFS.h>
#include <ArduinoJson.h>
#include "config.h"
#include "wifi_manager.h"
#include "espnow_manager.h"

// Kh·ªüi t·∫°o web server ch·∫°y tr√™n c·ªïng 80
AsyncWebServer server(80);

// Bi·∫øn tr·∫°ng th√°i ESP-NOW
bool is_master = IS_MASTER; // ƒê∆∞·ª£c quy ƒë·ªãnh b·∫±ng define

void setup()
{
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW); // T·∫Øt LED khi kh·ªüi ƒë·ªông
  
  Serial.begin(115200);
  delay(1000);
  
  // In th√¥ng tin v·ªÅ ch·∫ø ƒë·ªô ho·∫°t ƒë·ªông
  Serial.println("üöÄ ESP32 C3 WiFi Manager ƒëang kh·ªüi ƒë·ªông...");
  Serial.println(is_master ? "üî∑ Kh·ªüi ƒë·ªông ·ªü ch·∫ø ƒë·ªô MASTER" : "üî∂ Kh·ªüi ƒë·ªông ·ªü ch·∫ø ƒë·ªô SLAVE");

  // T·∫Øt Watchdog Timer
  disableWDT();

  // Kh·ªüi ƒë·ªông SPIFFS
  if (!SPIFFS.begin(true))
  {
    Serial.println("‚ùå L·ªói mount SPIFFS, th·ª≠ format...");
    SPIFFS.format();
    if (!SPIFFS.begin())
    {
      Serial.println("‚ùå SPIFFS mount th·∫•t b·∫°i!");
      return;
    }
  }
  Serial.println("‚úÖ SPIFFS ƒë√£ s·∫µn s√†ng");

  // Thi·∫øt l·∫≠p Access Point
  setupAP();

  // Kh·ªüi t·∫°o ESP-NOW
  espNowActive = initESPNow();
  if (espNowActive) {
    Serial.println("‚úÖ ESP-NOW ƒë√£ s·∫µn s√†ng");
    
    // Kh·ªüi t·∫°o tr·∫°ng th√°i LED cho slave
    if (!is_master) {
      slaveLedState = false;
      slaveConnectedToMaster = false;
      digitalWrite(LED_PIN, LOW); // T·∫Øt LED ban ƒë·∫ßu
    }
  } else {
    Serial.println("‚ùå Kh·ªüi t·∫°o ESP-NOW th·∫•t b·∫°i");
  }

  // C·∫•u h√¨nh c√°c route cho web server
  // Ph·ª•c v·ª• c√°c file tƒ©nh t·ª´ SPIFFS
  server.serveStatic("/", SPIFFS, "/");
  
  // API WiFi
  server.on("/api/scan", HTTP_GET, handleScan);
  server.on("/api/connect", HTTP_POST, handleConnect);
  server.on("/api/status", HTTP_GET, handleStatus);
  server.on("/api/disconnect", HTTP_GET, handleDisconnect);
  
  // API ESP-NOW
  server.on("/api/espnow/scan", HTTP_GET, handleESPNowScan);
  server.on("/api/espnow/list", HTTP_GET, handleESPNowList);
  server.on("/api/espnow/connect", HTTP_POST, handleESPNowConnect);
  server.on("/api/espnow/toggle", HTTP_POST, handleESPNowToggleLED);
  server.on("/api/espnow/slave/toggle", HTTP_POST, handleSlaveToggleLED);

  // X·ª≠ l√Ω 404 Not Found
  server.onNotFound([](AsyncWebServerRequest *request)
                    { request->send(SPIFFS, "/index.html", "text/html"); });

  server.begin();
  Serial.println("üåê HTTP server ƒë√£ ch·∫°y!");
}

void loop()
{
  // X·ª≠ l√Ω ESP-NOW
  if (!is_master && espNowActive) {
    static unsigned long lastBlink = 0;
    static unsigned long lastDiscovery = 0;
    unsigned long currentTime = millis();
    
    // G·ª≠i t√≠n hi·ªáu discovery m·ªói 5 gi√¢y
    if (currentTime - lastDiscovery > 5000) {
      lastDiscovery = currentTime;
      
      // G·ª≠i t√≠n hi·ªáu broadcast ƒë·ªÉ master ph√°t hi·ªán
      uint8_t broadcastMac[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
      esp_now_peer_info_t peerInfo = {};
      memcpy(peerInfo.peer_addr, broadcastMac, 6);
      peerInfo.channel = 0;  // S·ª≠ d·ª•ng k√™nh hi·ªán t·∫°i
      peerInfo.encrypt = false;
      
      // X√≥a peer c≈© n·∫øu ƒë√£ t·ªìn t·∫°i
      esp_now_del_peer(broadcastMac);
      
      // Th√™m peer broadcast
      esp_err_t result = esp_now_add_peer(&peerInfo);
      if (result == ESP_OK) {
        // G·ª≠i tin nh·∫Øn broadcast
        espnow_message_t discMsg;
        discMsg.type = 0;  // Discovery
        discMsg.data = slaveLedState ? 1 : 0;  // G·ª≠i tr·∫°ng th√°i LED hi·ªán t·∫°i
        strncpy(discMsg.name, AP_SSID, sizeof(discMsg.name));
        
        esp_now_send(broadcastMac, (uint8_t *)&discMsg, sizeof(discMsg));
        Serial.println("üì¢ G·ª≠i t√≠n hi·ªáu broadcast");
      }
    }
    
    // Nh·∫•p nh√°y LED khi ch∆∞a k·∫øt n·ªëi v·ªõi master
    if (!slaveConnectedToMaster) {
      if (currentTime - lastBlink > 500) {  // Nh·∫•p nh√°y m·ªói 0.5 gi√¢y
        lastBlink = currentTime;
        digitalWrite(LED_PIN, !digitalRead(LED_PIN));
      }
    } else {
      // Khi ƒë√£ k·∫øt n·ªëi, hi·ªÉn th·ªã tr·∫°ng th√°i LED ƒë√£ l∆∞u
      digitalWrite(LED_PIN, slaveLedState);
    }
  }
  
  // Master ƒë·ªãnh k·ª≥ qu√©t t√¨m slave m·ªõi
  if (is_master && espNowActive) {
    static unsigned long lastScan = 0;
    unsigned long currentTime = millis();
    
    if (currentTime - lastScan > 30000) {  // Qu√©t m·ªói 30 gi√¢y
      lastScan = currentTime;
      scanESPNowDevices();
    }
  }
}