#include "espnow_manager.h"

// ƒê·ªãnh nghƒ©a bi·∫øn to√†n c·ª•c
PeerInfo peerList[MAX_PEERS];
int peerCount = 0;
bool espNowActive = false;
bool slaveLedState = false;
bool slaveConnectedToMaster = false;

// H√†m g·ª≠i tin nh·∫Øn ESP-NOW v·ªõi retry
bool sendESPNowMessage(const uint8_t *mac, uint8_t type, uint8_t data) {
  espnow_message_t msg;
  msg.type = type;
  msg.data = data;
  strncpy(msg.name, AP_SSID, sizeof(msg.name));

  for (int retry = 0; retry < MAX_RETRIES; retry++) {
    esp_err_t result = esp_now_send(mac, (uint8_t *)&msg, sizeof(msg));
    if (result == ESP_OK) {
      return true;
    }
    delay(100 * (retry + 1));  // TƒÉng d·∫ßn th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn th·ª≠
  }
  return false;
}

// Callback khi g·ª≠i d·ªØ li·ªáu ESP-NOW
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  char macStr[18];
  snprintf(macStr, sizeof(macStr), "%02X:%02X:%02X:%02X:%02X:%02X",
           mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5]);
  
  if (status != ESP_NOW_SEND_SUCCESS) {
    Serial.printf("‚ùå G·ª≠i th·∫•t b·∫°i ƒë·∫øn %s\n", macStr);
    // TƒÉng retry count cho peer n√†y
    for (int i = 0; i < peerCount; i++) {
      if (memcmp(peerList[i].mac, mac_addr, 6) == 0) {
        peerList[i].retryCount++;
        if (peerList[i].retryCount >= MAX_RETRIES) {
          peerList[i].connected = false;  // ƒê√°nh d·∫•u m·∫•t k·∫øt n·ªëi sau nhi·ªÅu l·∫ßn th·ª≠
        }
        break;
      }
    }
  } else {
    Serial.printf("‚úÖ G·ª≠i th√†nh c√¥ng ƒë·∫øn %s\n", macStr);
  }
}

// Callback khi nh·∫≠n d·ªØ li·ªáu ESP-NOW
void OnDataRecv(const uint8_t *mac, const uint8_t *data, int len) {
  char macStr[18];
  snprintf(macStr, sizeof(macStr), "%02X:%02X:%02X:%02X:%02X:%02X",
           mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
  Serial.printf("üì• Nh·∫≠n t·ª´: %s\n", macStr);

  espnow_message_t *message = (espnow_message_t *)data;

  if (is_master) {
    // Master nh·∫≠n d·ªØ li·ªáu
    bool found = false;
    int deviceIndex = -1;
    
    // T√¨m ho·∫∑c th√™m thi·∫øt b·ªã v√†o danh s√°ch
    for (int i = 0; i < peerCount; i++) {
      if (memcmp(peerList[i].mac, mac, 6) == 0) {
        deviceIndex = i;
        found = true;
        // C·∫≠p nh·∫≠t th√¥ng tin thi·∫øt b·ªã
        peerList[i].lastSeen = millis();
        peerList[i].retryCount = 0;  // Reset retry count khi nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi
        peerList[i].name = String(message->name);
        peerList[i].rssi = WiFi.RSSI();
        break;
      }
    }

    if (!found && peerCount < MAX_PEERS) {
      deviceIndex = peerCount;
      memcpy(peerList[peerCount].mac, mac, 6);
      peerList[peerCount].name = String(message->name);
      peerList[peerCount].connected = false;
      peerList[peerCount].rssi = WiFi.RSSI();
      peerList[peerCount].channel = WiFi.channel();
      peerList[peerCount].ledState = false;
      peerList[peerCount].lastSeen = millis();
      peerList[peerCount].retryCount = 0;
      peerCount++;
      Serial.printf("üÜï Th√™m thi·∫øt b·ªã m·ªõi: %s\n", message->name);
    }

    // X·ª≠ l√Ω tin nh·∫Øn d·ª±a v√†o lo·∫°i
    switch (message->type) {
      case 0:  // Discovery response
        if (deviceIndex >= 0 && !peerList[deviceIndex].connected) {
          // T·ª± ƒë·ªông k·∫øt n·ªëi khi nh·∫≠n discovery
          if (addPeer(peerList[deviceIndex].mac, peerList[deviceIndex].channel)) {
            peerList[deviceIndex].connected = true;
            Serial.printf("‚úÖ T·ª± ƒë·ªông k·∫øt n·ªëi v·ªõi %s\n", peerList[deviceIndex].name.c_str());
          }
        }
        break;
        
      case 2:  // Status update
        if (deviceIndex >= 0) {
          peerList[deviceIndex].ledState = message->data;
          Serial.printf("üîÑ C·∫≠p nh·∫≠t LED %s: %s\n", 
                       peerList[deviceIndex].name.c_str(), 
                       message->data ? "B·∫¨T" : "T·∫ÆT");
        }
        break;
    }
  } else {
    // Slave nh·∫≠n d·ªØ li·ªáu
    switch (message->type) {
      case 0:  // Discovery request
        slaveConnectedToMaster = true;
        // G·ª≠i ph·∫£n h·ªìi v·ªõi retry
        sendESPNowMessage(mac, 0, slaveLedState ? 1 : 0);
        break;
        
      case 1:  // Command
      case 3:  // Toggle command
        if (message->type == 3 || message->data == 2) {
          toggleSlaveLed();  // Toggle LED
        } else {
          slaveLedState = message->data == 1;  // Set tr·ª±c ti·∫øp tr·∫°ng th√°i
          digitalWrite(LED_PIN, slaveLedState);
        }
        // G·ª≠i tr·∫°ng th√°i m·ªõi v·ªÅ master
        sendESPNowMessage(mac, 2, slaveLedState ? 1 : 0);
        break;
    }
  }
}

// H√†m ƒëi·ªÅu khi·ªÉn LED tr√™n slave
void toggleSlaveLed() {
  slaveLedState = !slaveLedState;
  digitalWrite(LED_PIN, slaveLedState);
  Serial.printf("üí° LED ƒë√£ %s\n", slaveLedState ? "B·∫¨T" : "T·∫ÆT");
}

// H√†m d·ªçn d·∫πp c√°c thi·∫øt b·ªã kh√¥ng ho·∫°t ƒë·ªông
void cleanupStaleDevices() {
  unsigned long currentTime = millis();
  int i = 0;
  
  while (i < peerCount) {
    if (currentTime - peerList[i].lastSeen > PEER_TIMEOUT) {
      // X√≥a peer kh·ªèi ESP-NOW n·∫øu ƒë√£ k·∫øt n·ªëi
      if (peerList[i].connected) {
        esp_now_del_peer(peerList[i].mac);
      }
      
      // X√≥a kh·ªèi danh s√°ch b·∫±ng c√°ch d·ªãch c√°c ph·∫ßn t·ª≠ c√≤n l·∫°i
      for (int j = i; j < peerCount - 1; j++) {
        memcpy(&peerList[j], &peerList[j + 1], sizeof(PeerInfo));
      }
      peerCount--;
      Serial.printf("üóëÔ∏è X√≥a thi·∫øt b·ªã kh√¥ng ho·∫°t ƒë·ªông: %s\n", peerList[i].name.c_str());
    } else {
      i++;
    }
  }
}

// H√†m kh·ªüi t·∫°o ESP-NOW
bool initESPNow() {
  if (esp_now_init() != ESP_OK) {
    Serial.println("‚ùå Kh·ªüi t·∫°o ESP-NOW th·∫•t b·∫°i");
    return false;
  }

  esp_now_register_send_cb(OnDataSent);
  esp_now_register_recv_cb(OnDataRecv);
  
  Serial.println("‚úÖ Kh·ªüi t·∫°o ESP-NOW th√†nh c√¥ng");
  return true;
}

// H√†m th√™m peer v√†o ESP-NOW
bool addPeer(const uint8_t *mac, uint8_t channel) {
  // X√≥a peer c≈© n·∫øu ƒë√£ t·ªìn t·∫°i
  esp_now_del_peer(mac);
  
  esp_now_peer_info_t peerInfo = {};
  memcpy(peerInfo.peer_addr, mac, 6);
  peerInfo.channel = channel;
  peerInfo.encrypt = false;

  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("‚ùå Th√™m peer th·∫•t b·∫°i");
    return false;
  }
  return true;
}

// H√†m qu√©t t√¨m thi·∫øt b·ªã ESP-NOW
void scanESPNowDevices() {
  if (!is_master) {
    Serial.println("‚ö†Ô∏è Ch·ªâ master m·ªõi c√≥ th·ªÉ qu√©t thi·∫øt b·ªã");
    return;
  }

  // D·ªçn d·∫πp c√°c thi·∫øt b·ªã kh√¥ng ho·∫°t ƒë·ªông tr∆∞·ªõc khi qu√©t
  cleanupStaleDevices();

  Serial.println("üîç ƒêang qu√©t thi·∫øt b·ªã ESP-NOW...");
  
  uint8_t broadcastMac[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
  if (addPeer(broadcastMac, 0)) {  // S·ª≠ d·ª•ng k√™nh hi·ªán t·∫°i
    sendESPNowMessage(broadcastMac, 0, 0);  // G·ª≠i discovery v·ªõi retry
  }
}

// H√†m x·ª≠ l√Ω API qu√©t ESP-NOW
void handleESPNowScan(AsyncWebServerRequest *request) {
  if (!espNowActive) {
    request->send(400, "application/json", "{\"success\":false,\"message\":\"ESP-NOW ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t\"}");
    return;
  }
  
  scanESPNowDevices();
  request->send(200, "application/json", "{\"success\":true,\"message\":\"ƒêang qu√©t thi·∫øt b·ªã ESP-NOW\"}");
}

// H√†m x·ª≠ l√Ω API l·∫•y danh s√°ch thi·∫øt b·ªã ESP-NOW
void handleESPNowList(AsyncWebServerRequest *request) {
  if (!espNowActive) {
    request->send(400, "application/json", "{\"success\":false,\"message\":\"ESP-NOW ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t\"}");
    return;
  }
  
  // D·ªçn d·∫πp c√°c thi·∫øt b·ªã kh√¥ng ho·∫°t ƒë·ªông
  cleanupStaleDevices();
  
  DynamicJsonDocument doc(4096);
  JsonArray devices = doc.createNestedArray("devices");
  
  if (is_master) {
    for (int i = 0; i < peerCount; i++) {
      JsonObject device = devices.createNestedObject();
      char macStr[18];
      snprintf(macStr, sizeof(macStr), "%02X:%02X:%02X:%02X:%02X:%02X",
               peerList[i].mac[0], peerList[i].mac[1], peerList[i].mac[2], 
               peerList[i].mac[3], peerList[i].mac[4], peerList[i].mac[5]);
      
      device["mac"] = String(macStr);
      device["name"] = peerList[i].name;
      device["connected"] = peerList[i].connected;
      device["rssi"] = peerList[i].rssi;
      device["ledState"] = peerList[i].ledState;
      device["lastSeen"] = peerList[i].lastSeen;
    }
  } else {
    JsonObject device = devices.createNestedObject();
    uint8_t mac[6];
    WiFi.macAddress(mac);
    char macStr[18];
    snprintf(macStr, sizeof(macStr), "%02X:%02X:%02X:%02X:%02X:%02X",
             mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
    
    device["mac"] = String(macStr);
    device["name"] = String(AP_SSID);
    device["connected"] = slaveConnectedToMaster;
    device["rssi"] = 0;
    device["ledState"] = slaveLedState;
  }
  
  String response;
  serializeJson(doc, response);
  request->send(200, "application/json", response);
}

// H√†m x·ª≠ l√Ω API k·∫øt n·ªëi ƒë·∫øn thi·∫øt b·ªã ESP-NOW
void handleESPNowConnect(AsyncWebServerRequest *request) {
  if (!espNowActive || !is_master) {
    request->send(400, "application/json", "{\"success\":false,\"message\":\"Ch·ªâ master m·ªõi c√≥ th·ªÉ k·∫øt n·ªëi\"}");
    return;
  }
  
  if (!request->hasParam("mac", true)) {
    request->send(400, "application/json", "{\"success\":false,\"message\":\"Thi·∫øu ƒë·ªãa ch·ªâ MAC\"}");
    return;
  }
  
  String macStr = request->getParam("mac", true)->value();
  uint8_t mac[6];
  sscanf(macStr.c_str(), "%2hhx:%2hhx:%2hhx:%2hhx:%2hhx:%2hhx", 
         &mac[0], &mac[1], &mac[2], &mac[3], &mac[4], &mac[5]);
  
  int deviceIndex = -1;
  for (int i = 0; i < peerCount; i++) {
    if (memcmp(peerList[i].mac, mac, 6) == 0) {
      deviceIndex = i;
      break;
    }
  }
  
  if (deviceIndex == -1) {
    request->send(404, "application/json", "{\"success\":false,\"message\":\"Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã\"}");
    return;
  }
  
  if (addPeer(mac, peerList[deviceIndex].channel)) {
    peerList[deviceIndex].connected = true;
    peerList[deviceIndex].retryCount = 0;
    request->send(200, "application/json", "{\"success\":true,\"message\":\"K·∫øt n·ªëi th√†nh c√¥ng\"}");
    Serial.printf("‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi: %s\n", peerList[deviceIndex].name.c_str());
  } else {
    request->send(500, "application/json", "{\"success\":false,\"message\":\"Kh√¥ng th·ªÉ k·∫øt n·ªëi\"}");
  }
}

// H√†m x·ª≠ l√Ω API ƒëi·ªÅu khi·ªÉn LED
void handleESPNowToggleLED(AsyncWebServerRequest *request) {
  if (!espNowActive || !is_master) {
    request->send(400, "application/json", "{\"success\":false,\"message\":\"Ch·ªâ master m·ªõi c√≥ th·ªÉ ƒëi·ªÅu khi·ªÉn LED\"}");
    return;
  }
  
  if (!request->hasParam("mac", true)) {
    request->send(400, "application/json", "{\"success\":false,\"message\":\"Thi·∫øu ƒë·ªãa ch·ªâ MAC\"}");
    return;
  }
  
  String macStr = request->getParam("mac", true)->value();
  uint8_t mac[6];
  sscanf(macStr.c_str(), "%2hhx:%2hhx:%2hhx:%2hhx:%2hhx:%2hhx", 
         &mac[0], &mac[1], &mac[2], &mac[3], &mac[4], &mac[5]);
  
  int deviceIndex = -1;
  for (int i = 0; i < peerCount; i++) {
    if (memcmp(peerList[i].mac, mac, 6) == 0) {
      deviceIndex = i;
      break;
    }
  }
  
  if (deviceIndex == -1 || !peerList[deviceIndex].connected) {
    request->send(404, "application/json", "{\"success\":false,\"message\":\"Thi·∫øt b·ªã kh√¥ng ƒë∆∞·ª£c k·∫øt n·ªëi\"}");
    return;
  }
  
  // G·ª≠i l·ªánh toggle LED
  if (sendESPNowMessage(mac, 3, 2)) {  // Type 3: Toggle command, Data 2: Toggle
    request->send(200, "application/json", "{\"success\":true,\"message\":\"ƒê√£ g·ª≠i l·ªánh toggle LED\"}");
    Serial.printf("üì§ ƒê√£ g·ª≠i l·ªánh toggle LED ƒë·∫øn %s\n", peerList[deviceIndex].name.c_str());
  } else {
    request->send(500, "application/json", "{\"success\":false,\"message\":\"Kh√¥ng th·ªÉ g·ª≠i l·ªánh\"}");
  }
}

// H√†m x·ª≠ l√Ω API ƒë·ªÉ slave t·ª± ƒëi·ªÅu khi·ªÉn LED
void handleSlaveToggleLED(AsyncWebServerRequest *request) {
  if (is_master) {
    request->send(400, "application/json", "{\"success\":false,\"message\":\"Ch·ª©c nƒÉng n√†y ch·ªâ d√†nh cho slave\"}");
    return;
  }
  
  toggleSlaveLed();  // Toggle LED
  
  request->send(200, "application/json", 
    "{\"success\":true,\"message\":\"ƒê√£ " + String(slaveLedState ? "B·∫¨T" : "T·∫ÆT") + " LED\"}"
  );
}
